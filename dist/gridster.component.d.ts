import { OnInit, ElementRef, OnDestroy, Renderer2 } from '@angular/core';
import { GridsterConfig } from './gridsterConfig.interface';
import { GridsterItem } from './gridsterItem.interface';
export declare class GridsterComponent implements OnInit, OnDestroy {
    renderer: Renderer2;
    options: GridsterConfig;
    detectScrollBarLayout: () => void;
    calculateLayoutDebounce: Function;
    onResizeFunction: (event: any) => void;
    movingItem: GridsterItem;
    previewStyle: Function;
    el: any;
    state: {
        mobile: boolean;
        curWidth: number;
        curHeight: number;
        options: GridsterConfig;
        scrollBarPresent: boolean;
        grid: Array<GridsterItem>;
        columns: number;
        rows: number;
        curColWidth: number;
        curRowHeight: number;
    };
    transitionend: Function;
    windowResize: Function;
    private cleanCallback;
    constructor(el: ElementRef, renderer: Renderer2);
    ngOnInit(): void;
    ngDoCheck(): void;
    optionsChanged(): void;
    ngOnDestroy(): void;
    onResize(): void;
    detectScrollBar(): void;
    setGridSize(): void;
    setGridDimensions(): void;
    calculateLayout(): void;
    addItem(item: GridsterItem): void;
    removeItem(item: GridsterItem): void;
    checkCollision(item: GridsterItem): GridsterItem;
    findItemWithItem(item: GridsterItem): GridsterItem;
    autoPositionItem(item: GridsterItem): void;
    pixelsToPosition(x: number, y: number, roundingMethod: Function): [number, number];
    positionXToPixels(x: number): number;
    positionYToPixels(y: number): number;
    checkCompactUp(): Boolean;
    moveUpTillCollision(item: GridsterItem): Boolean;
    checkCompactLeft(): Boolean;
    moveLeftTillCollision(item: GridsterItem): Boolean;
}
